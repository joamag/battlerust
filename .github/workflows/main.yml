name: Main Workflow
on:
  push:
  schedule:
    - cron: "0 0 * * 0"
jobs:
  build:
    name: Build
    timeout-minutes: 10
    strategy:
      matrix:
        rust-version: [
          "1.82.0",
          "1.83.0",
          "1.84.0",
          "1.85.0",
          "latest"
        ]
    runs-on: ubuntu-latest
    container: rust:${{ matrix.rust-version }}
    steps:
      - name: Checkout code from repository
        uses: actions/checkout@v4
      - name: Install Rust components
        run: |
          rustup component add rustfmt
          rustup component add clippy
      - name: Print Rust information
        run: rustc --version
      - name: Verify Rust code format
        run: cargo fmt --all -- --check
      - name: Verify Rust code linting
        run: cargo clippy -- -D warnings -A unknown-lints
      - name: Run unit tests
        run: cargo test
      - name: Build development version
        run: cargo build
      - name: Build release version
        run: cargo build --release
  build-wasi:
    name: Build WASI
    timeout-minutes: 30
    strategy:
      matrix:
        rust: [
          { version: "1.82.0", target: "wasm32-wasip1" },
          { version: "1.83.0", target: "wasm32-wasip1" },
          { version: "1.84.0", target: "wasm32-wasip1" },
          { version: "1.85.0", target: "wasm32-wasip1" },
          { version: "latest", target: "wasm32-wasip1" }
        ]
    runs-on: ubuntu-latest
    container: rust:${{ matrix.rust.version }}
    steps:
      - name: Checkout code from repository
        uses: actions/checkout@v4
      - name: Install Rust components
        run: |
          rustup component add rustfmt
          rustup component add clippy
      - name: Print Rust information
        run: rustc --version
      - name: Verify Rust code format
        run: cargo fmt --all -- --check
      - name: Verify Rust code linting
        run: cargo clippy -- -D warnings -A unknown-lints
      - name: Run unit tests
        run: cargo test
      - name: Install ${{ matrix.rust.target }}
        run: rustup target add ${{ matrix.rust.target }}
      - name: Build WASI binary
        run: cargo build --release --target ${{ matrix.rust.target }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: battlerust-wasi.${{ matrix.rust.version }}.wasm
          path: target/${{ matrix.rust.target }}/release/battlerust.wasm
          retention-days: 15
  build-wasm:
    name: Build WASM
    timeout-minutes: 30
    strategy:
      matrix:
        rust-version: [
          "1.88.0",
          "1.89.0",
          "1.90.0",
          "latest"
        ]
        node-version: ["20"]
    runs-on: ubuntu-latest
    container: rust:${{ matrix.rust-version }}
    steps:
      - name: Checkout code from repository
        uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y -q cmake
      - name: Install Rust components
        run: |
          rustup component add rustfmt
          rustup component add clippy
      - name: Print Rust information
        run: rustc --version
      - name: Verify Rust code format
        run: cargo fmt --all -- --check
      - name: Verify Rust code linting
        run: cargo clippy -- -D warnings -A unknown-lints
      - name: Run unit tests
        run: cargo test
      - name: Install wasm-pack
        run: cargo install wasm-pack
      - name: Build WASM Web binary
        run: wasm-pack build --release --target=web --out-dir=frontends/web/lib -- --features wasm
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build and lint Web code
        run: cd frontends/web && npm install && npm run build && npm run lint
